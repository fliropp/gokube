// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protokube.proto

package protokube

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Vessel struct {
	Val                  int64    `protobuf:"varint,1,opt,name=Val,proto3" json:"Val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vessel) Reset()         { *m = Vessel{} }
func (m *Vessel) String() string { return proto.CompactTextString(m) }
func (*Vessel) ProtoMessage()    {}
func (*Vessel) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5d588564cfa8b, []int{0}
}

func (m *Vessel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vessel.Unmarshal(m, b)
}
func (m *Vessel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vessel.Marshal(b, m, deterministic)
}
func (m *Vessel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vessel.Merge(m, src)
}
func (m *Vessel) XXX_Size() int {
	return xxx_messageInfo_Vessel.Size(m)
}
func (m *Vessel) XXX_DiscardUnknown() {
	xxx_messageInfo_Vessel.DiscardUnknown(m)
}

var xxx_messageInfo_Vessel proto.InternalMessageInfo

func (m *Vessel) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func init() {
	proto.RegisterType((*Vessel)(nil), "protokube.Vessel")
}

func init() { proto.RegisterFile("protokube.proto", fileDescriptor_9ed5d588564cfa8b) }

var fileDescriptor_9ed5d588564cfa8b = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xcf, 0x2e, 0x4d, 0x4a, 0xd5, 0x03, 0xb3, 0x84, 0x38, 0xe1, 0x02, 0x4a, 0x52, 0x5c, 0x6c,
	0x61, 0xa9, 0xc5, 0xc5, 0xa9, 0x39, 0x42, 0x02, 0x5c, 0xcc, 0x61, 0x89, 0x39, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xcc, 0x41, 0x20, 0xa6, 0x91, 0x3f, 0x17, 0x97, 0x53, 0x66, 0x70, 0x49, 0x51, 0x6a,
	0x62, 0x6e, 0x6a, 0x91, 0x90, 0x23, 0x97, 0xb0, 0x53, 0x66, 0x4a, 0x66, 0x51, 0x6a, 0x72, 0x49,
	0x66, 0x7e, 0x5e, 0x62, 0x0e, 0x44, 0x42, 0x48, 0x50, 0x0f, 0x61, 0x3a, 0xc4, 0x24, 0x29, 0x4c,
	0x21, 0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x10, 0xc7, 0x0f, 0xfd, 0x91, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BiStreamerClient is the client API for BiStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BiStreamerClient interface {
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (BiStreamer_BidirectionalStreamClient, error)
}

type biStreamerClient struct {
	cc *grpc.ClientConn
}

func NewBiStreamerClient(cc *grpc.ClientConn) BiStreamerClient {
	return &biStreamerClient{cc}
}

func (c *biStreamerClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (BiStreamer_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BiStreamer_serviceDesc.Streams[0], "/protokube.BiStreamer/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &biStreamerBidirectionalStreamClient{stream}
	return x, nil
}

type BiStreamer_BidirectionalStreamClient interface {
	Send(*Vessel) error
	Recv() (*Vessel, error)
	grpc.ClientStream
}

type biStreamerBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *biStreamerBidirectionalStreamClient) Send(m *Vessel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biStreamerBidirectionalStreamClient) Recv() (*Vessel, error) {
	m := new(Vessel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiStreamerServer is the server API for BiStreamer service.
type BiStreamerServer interface {
	BidirectionalStream(BiStreamer_BidirectionalStreamServer) error
}

// UnimplementedBiStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedBiStreamerServer struct {
}

func (*UnimplementedBiStreamerServer) BidirectionalStream(srv BiStreamer_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}

func RegisterBiStreamerServer(s *grpc.Server, srv BiStreamerServer) {
	s.RegisterService(&_BiStreamer_serviceDesc, srv)
}

func _BiStreamer_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiStreamerServer).BidirectionalStream(&biStreamerBidirectionalStreamServer{stream})
}

type BiStreamer_BidirectionalStreamServer interface {
	Send(*Vessel) error
	Recv() (*Vessel, error)
	grpc.ServerStream
}

type biStreamerBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *biStreamerBidirectionalStreamServer) Send(m *Vessel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biStreamerBidirectionalStreamServer) Recv() (*Vessel, error) {
	m := new(Vessel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BiStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protokube.BiStreamer",
	HandlerType: (*BiStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _BiStreamer_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protokube.proto",
}
