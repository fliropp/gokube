// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gokube.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingReq struct {
	Request              string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6ece4fc394fe2b, []int{0}
}

func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReq.Unmarshal(m, b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
}
func (m *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(m, src)
}
func (m *PingReq) XXX_Size() int {
	return xxx_messageInfo_PingReq.Size(m)
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

func (m *PingReq) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type PingResp struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResp) Reset()         { *m = PingResp{} }
func (m *PingResp) String() string { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()    {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6ece4fc394fe2b, []int{1}
}

func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResp.Unmarshal(m, b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
}
func (m *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(m, src)
}
func (m *PingResp) XXX_Size() int {
	return xxx_messageInfo_PingResp.Size(m)
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

func (m *PingResp) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*PingReq)(nil), "grpc.PingReq")
	proto.RegisterType((*PingResp)(nil), "grpc.PingResp")
}

func init() { proto.RegisterFile("gokube.proto", fileDescriptor_7f6ece4fc394fe2b) }

var fileDescriptor_7f6ece4fc394fe2b = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcf, 0xcf, 0x2e,
	0x4d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48, 0x56, 0x52,
	0xe6, 0x62, 0x0f, 0xc8, 0xcc, 0x4b, 0x0f, 0x4a, 0x2d, 0x14, 0x92, 0xe0, 0x62, 0x2f, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xd4, 0xb8,
	0x38, 0x20, 0x8a, 0x8a, 0x0b, 0x84, 0xa4, 0xb8, 0x38, 0x8a, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0xa1, 0xca, 0xe0, 0x7c, 0xa3, 0x64, 0x2e, 0x16, 0x90, 0x3a, 0x21, 0x2d, 0x2e, 0x76, 0xf7,
	0xd4, 0x12, 0x30, 0x93, 0x57, 0x0f, 0x64, 0x8d, 0x1e, 0xd4, 0x0e, 0x29, 0x3e, 0x64, 0x6e, 0x71,
	0x81, 0x12, 0x83, 0x90, 0x3e, 0x17, 0x57, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x51, 0xca, 0x0d,
	0x18, 0x93, 0xd8, 0xc0, 0xce, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0x63, 0xe6, 0xdc,
	0xce, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingClient is the client API for Ping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingClient interface {
	GetPing(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	StreamPing(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (Ping_StreamPingClient, error)
}

type pingClient struct {
	cc *grpc.ClientConn
}

func NewPingClient(cc *grpc.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) GetPing(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/grpc.Ping/GetPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingClient) StreamPing(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (Ping_StreamPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ping_serviceDesc.Streams[0], "/grpc.Ping/StreamPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingStreamPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ping_StreamPingClient interface {
	Recv() (*PingResp, error)
	grpc.ClientStream
}

type pingStreamPingClient struct {
	grpc.ClientStream
}

func (x *pingStreamPingClient) Recv() (*PingResp, error) {
	m := new(PingResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServer is the server API for Ping service.
type PingServer interface {
	GetPing(context.Context, *PingReq) (*PingResp, error)
	StreamPing(*PingReq, Ping_StreamPingServer) error
}

// UnimplementedPingServer can be embedded to have forward compatible implementations.
type UnimplementedPingServer struct {
}

func (*UnimplementedPingServer) GetPing(ctx context.Context, req *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (*UnimplementedPingServer) StreamPing(req *PingReq, srv Ping_StreamPingServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPing not implemented")
}

func RegisterPingServer(s *grpc.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Ping/GetPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).GetPing(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ping_StreamPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServer).StreamPing(m, &pingStreamPingServer{stream})
}

type Ping_StreamPingServer interface {
	Send(*PingResp) error
	grpc.ServerStream
}

type pingStreamPingServer struct {
	grpc.ServerStream
}

func (x *pingStreamPingServer) Send(m *PingResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Ping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Ping",
	HandlerType: (*PingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPing",
			Handler:    _Ping_GetPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPing",
			Handler:       _Ping_StreamPing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gokube.proto",
}
